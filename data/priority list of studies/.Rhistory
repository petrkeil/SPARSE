X$isProtectedArea <- X$isProtectedArea == Y
X$isProtectedArea
X$isProtectedArea[1:3]
X$isProtectedArea[which(is.na(X$isProtectedArea))]
which(is.na(X$isProtectedArea))
X$isProtectedArea[which(is.na(X$isProtectedArea))] <- FALSE
X$isProtectedArea
# clean some columns
X$isProtectedArea <- X$isProtectedArea == Y
X$isProtectedArea[which(is.na(X$isProtectedArea))] <- FALSE
X <- read_excel("../../data/priority list of studies/SurveyOfMaterials-birds.xlsx",
sheet = 1)
X <- data.frame(X)
# clean some columns
X$isProtectedArea <- X$isProtectedArea == Y
X$isProtectedArea[which(is.na(X$isProtectedArea))] <- FALSE
X
X <- read_excel("../../data/priority list of studies/SurveyOfMaterials-birds.xlsx",
sheet = 1)
X <- data.frame(X)
# clean some columns
X$isProtectedArea <- X$isProtectedArea == Y
X$isProtectedArea
X <- read_excel("../../data/priority list of studies/SurveyOfMaterials-birds.xlsx",
sheet = 1)
X <- data.frame(X)
# clean some columns
X$isProtectedArea <- X$isProtectedArea == Y
X$isProtectedArea
# read the data table
X <- read_excel("../../data/priority list of studies/SurveyOfMaterials-birds.xlsx",
sheet = 1)
X <- data.frame(X)
X$isProtectedArea
# clean some columns
X$isProtectedArea <- X$isProtectedArea == "Y"
X$isProtectedArea
# read the data table
X <- read_excel("../../data/priority list of studies/SurveyOfMaterials-birds.xlsx",
sheet = 1)
X <- data.frame(X)
X$isProtectedArea
# clean some columns
X$isProtectedArea <- X$isProtectedArea == "Y"
X
X$isProtectedArea
X$isProtectedArea[which(is.na(X$isProtectedArea))] <- FALSE
X$isProtectedArea
X <- read_excel("../../data/priority list of studies/SurveyOfMaterials-birds.xlsx",
sheet = 1)
X <- data.frame(X)
X$isProtectedArea
X$done <- X$done == "Y"
X$done[which(is.na(X$done))] <- FALSE
X
X$done
library("dplyr")
library("strata")
install.packages("strata")
library("strata")
library("sampling")
?strata
head(X)
strata(X, stratanames = c("isProtectedArea", "district", "yearPublished"))
strata(X,
size = 10,
stratanames = c("isProtectedArea", "district", "yearPublished"))
strata(X,
size = nrow(X),
stratanames = c("isProtectedArea", "district", "yearPublished"))
strata(X,
size = 3,
stratanames = c("isProtectedArea", "district", "yearPublished"))
strata(X,
method = "systematic",
stratanames = c("isProtectedArea", "district", "yearPublished"))
strata(X,
size = nrow(X),
stratanames = c("isProtectedArea", "district", "yearPublished"))
strata(X,
size = 4,
stratanames = c("isProtectedArea", "district", "yearPublished"))
library("tidyverse")
X %>% group_by(isProtectedArea) %>% sample_n(nrow(X), replace = FALSE)
X %>% group_by(isProtectedArea) %>% sample_n(1, replace = FALSE)
X %>% group_by(isProtectedArea) %>% sample_n(3, replace = FALSE)
X %>% group_by(isProtectedArea) %>% sample_n(2, replace = FALSE)
X %>% group_by(isProtectedArea) %>% sample_n(1, replace = FALSE)
?sample_n
?slice_sample
X %>% group_by(isProtectedArea) %>% slice_sample(n=nrow(X), replace = FALSE)
?group_by
X.smp <-X %>%
group_by(yearPublished, district, isProtectedArea) %>%
slice_sample(n=nrow(X), replace = FALSE)
X.smp
view(X.smp)
?slice_sample
library("cluster")
?daisy
# 5/2/2022 by Petr Keil
library("readxl")
library("rstudioapi")
library("dplyr")
library("sampling")
library("cluster")
library("tidyverse")
# set working directory to the current path (works in R studio)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
# read the data table
X <- read_excel("../../data/priority list of studies/SurveyOfMaterials-birds.xlsx",
sheet = 1)
X <- data.frame(X)
# turn some columns to boolean variable
X$isProtectedArea <- X$isProtectedArea == "Y"
X$isProtectedArea[which(is.na(X$isProtectedArea))] <- FALSE
X$done <- X$done == "Y"
X$done[which(is.na(X$done))] <- FALSE
head(X)
# create clusters of studies with similar attributes
for.cluster <- select(.data = X, yearPublished, district, isProtectedArea)
# create clusters of studies with similar attributes
cluster.vars <- select(.data = X, yearPublished, district, isProtectedArea)
daisy(cluster.vars, metric="gower")
head(cluster.vars)
class(cluster.vars)
class(cluster.vars[1])
class(cluster.vars[,1])
class(cluster.vars[,2])
?mutate
# create clusters of studies with similar attributes
cluster.vars <- select(.data = X, yearPublished, district, isProtectedArea) %>%
mutate(district = as.factor(district),
isProtectedArea = as.factor(isProtectedArea))
cluster.vars
daisy(cluster.vars, metric="gower")
# pairwise dissimilarity matrix based
dissim <- daisy(cluster.vars, metric="gower")
# partitioning around medoids
silhouette <- c()
silhouette = c(silhouette, NA)
for(i in 2:10){
pam_clusters = pam(as.matrix(dissim),
diss = TRUE,
k = i)
silhouette = c(silhouette ,pam_clusters$silinfo$avg.width)
}
plot(1:10, silhouette,
xlab = "Clusters",
ylab = "Silhouette Width")
lines(1:10, silhouette)
silhouette <- c()
silhouette = c(silhouette, NA)
for(i in 2:20){
pam_clusters = pam(as.matrix(dissim),
diss = TRUE,
k = i)
silhouette = c(silhouette ,pam_clusters$silinfo$avg.width)
}
plot(1:10, silhouette,
xlab = "Clusters",
ylab = "Silhouette Width")
lines(1:10, silhouette)
plot(1:20, silhouette,
xlab = "Clusters",
ylab = "Silhouette Width")
pam_clusters = pam(as.matrix(dissim),
diss = TRUE,
k = 10)
pam_clusters
# partitioning around medoids
pam.clusters = pam(as.matrix(dissim),
diss = TRUE,
k = 10)
pam.clusters$clustering
# partitioning around medoids
pam.clusters = pam(as.matrix(dissim),
diss = TRUE,
k = 10)$clustering
pam.clusters
X <- data.frame(X, pam.clusters = pam.clusters)
as.factor(pam.clusters)
# stratified random sampling
X.smp <-X %>%
group_by(pam.clusters) %>%
slice_sample(n=nrow(X), replace = FALSE)
X.smp
view(X.smp)
plot(X$yearPublished)
plot(X.smp$yearPublished)
plot(X$yearPublished)
plot(X.smp$yearPublished)
# stratified random sampling
X.smp <-X %>%
group_by(pam.clusters) %>%
slice_sample(n=nrow(X), replace = FALSE)
plot(X.smp$yearPublished)
plot(X$yearPublished)
# stratified random sampling
X.smp <-X %>%
group_by(pam.clusters) %>%
slice_sample(n=nrow(X), replace = FALSE)
plot(X$yearPublished)
plot(X.smp$yearPublished)
?slice_sample
# sampling sequentially from each cluster,
clust.id <- sort(unique(pam.clusters))
clust.id
# remove studies that have already been in the database
done.X <- X[X$done == FALSE, ]
# set working directory to the current path (works in R studio)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
# read the data table
X <- read_excel("../../data/priority list of studies/SurveyOfMaterials-birds.xlsx",
sheet = 1)
X <- data.frame(X)
# turn some columns to boolean variable
X$isProtectedArea <- X$isProtectedArea == "Y"
X$isProtectedArea[which(is.na(X$isProtectedArea))] <- FALSE
X$done <- X$done == "Y"
X$done[which(is.na(X$done))] <- FALSE
# remove studies that have already been in the database
done.X <- X[X$done == FALSE, ]
nrow(X)
nrow(done.X)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
# read the data table
X <- read_excel("../../data/priority list of studies/SurveyOfMaterials-birds.xlsx",
sheet = 1)
X <- data.frame(X)
# turn some columns to boolean variable
X$isProtectedArea <- X$isProtectedArea == "Y"
X$isProtectedArea[which(is.na(X$isProtectedArea))] <- FALSE
X$done <- X$done == "Y"
X$done[which(is.na(X$done))] <- FALSE
# studies have already been in the database
done.X <- X[X$done == TRUE, ]
# studies that have not yet been in the database
X <- X[X$done == FALSE, ]
nrow(X)
nrow(done.X)
# select variables for clustering
cluster.vars <- select(.data = X, yearPublished, district, isProtectedArea) %>%
mutate(district = as.factor(district),
isProtectedArea = as.factor(isProtectedArea))
# pairwise dissimilarity matrix based
dissim <- daisy(cluster.vars, metric="gower")
# partitioning around medoids (PAM)
k = 10 # set number of clusters
pam.clusters = pam(as.matrix(dissim),
diss = TRUE,
k = k)$clustering
X <- data.frame(X, pam.clusters = pam.clusters)
# sampling sequentially from each cluster,
clust.id <- sort(unique(pam.clusters))
?arrange
pam.clusters
as.factor(pam.clusters)
as.factor(pam.clusters)$levels
x <- as.factor(pam.clusters)
table(x)
as.numeric(table(x))
pam.clusters
pam(as.matrix(dissim),
diss = TRUE,
k = k)
clust.size <- as.numeric(table(as.factor(pam.clusters)))
# sampling sequentially from each cluster,
clust.id <- sort(unique(pam.clusters))
clust.size <- as.numeric(table(as.factor(pam.clusters)))
clust <- data.frame(clust.id, clust.size)
clust
pam.clusters
?seq
?sort
?order
?seq
clust.seq <- c()
for(i in 1:length(clust.id))
{
seq.i <- seq(from = 1, to = clust.size[i])
clust.seq <- c(clust.seq, seq.i)
}
clust.seq
X
X <- X[X$pam.clusters,]
X
# 5/2/2022 by Petr Keil
library("readxl")
library("rstudioapi")
library("dplyr")
library("sampling")
library("cluster")
library("tidyverse")
# set working directory to the current path (works in R studio)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
# read the data table
X <- read_excel("../../data/priority list of studies/SurveyOfMaterials-birds.xlsx",
sheet = 1)
X <- data.frame(X)
# turn some columns to boolean variable
X$isProtectedArea <- X$isProtectedArea == "Y"
X$isProtectedArea[which(is.na(X$isProtectedArea))] <- FALSE
X$done <- X$done == "Y"
X$done[which(is.na(X$done))] <- FALSE
# studies have already been in the database
done.X <- X[X$done == TRUE, ]
# studies that have not yet been in the database
X <- X[X$done == FALSE, ]
# ------------------------------------------------------------------------------
# select variables for clustering
cluster.vars <- select(.data = X, yearPublished, district, isProtectedArea) %>%
mutate(district = as.factor(district),
isProtectedArea = as.factor(isProtectedArea))
# pairwise dissimilarity matrix based
dissim <- daisy(cluster.vars, metric="gower")
# partitioning around medoids (PAM)
k = 10 # set number of clusters
pam.clusters = pam(as.matrix(dissim),
diss = TRUE,
k = k)$clustering
X <- data.frame(X, pam.clusters = pam.clusters)
X <- X[order(X$pam.clusters),]
X
clust.seq
X <- data.frame(X, clust.seq)
head(X)
?order
?rank
rank(clust.seq)
rank(clust.seq, ties.method = "random")
rank(clust.seq, ties.method = "random")
rank(clust.seq, ties.method = "random")
rank(clust.seq, ties.method = "random")
clust.seq
rank(clust.seq)
study.rank <- rank(clust.seq, ties.method = "random")
X <- data.frame(X, studyRank)
studyRank <- rank(clust.seq, ties.method = "random")
X <- data.frame(X, studyRank)
X
# set working directory to the current path (works in R studio)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
# read the data table
X <- read_excel("../../data/priority list of studies/SurveyOfMaterials-birds.xlsx",
sheet = 1)
X <- data.frame(X)
# turn some columns to boolean variable
X$isProtectedArea <- X$isProtectedArea == "Y"
X$isProtectedArea[which(is.na(X$isProtectedArea))] <- FALSE
X$done <- X$done == "Y"
X$done[which(is.na(X$done))] <- FALSE
# studies have already been in the database
done.X <- X[X$done == TRUE, ]
# studies that have not yet been in the database
X <- X[X$done == FALSE, ]
# ------------------------------------------------------------------------------
# select variables for clustering
cluster.vars <- select(.data = X, yearPublished, district, isProtectedArea) %>%
mutate(district = as.factor(district),
isProtectedArea = as.factor(isProtectedArea))
# pairwise dissimilarity matrix based
dissim <- daisy(cluster.vars, metric="gower")
# partitioning around medoids (PAM)
k = 10 # set number of clusters
pam.clusters = pam(as.matrix(dissim),
diss = TRUE,
k = k)$clustering
# sampling sequentially from each cluster,
clust.id <- sort(unique(pam.clusters))
clust.size <- as.numeric(table(as.factor(pam.clusters)))
clust.seq <- c()
for(i in 1:length(clust.id))
{
seq.i <- seq(from = 1, to = clust.size[i])
clust.seq <- c(clust.seq, seq.i)
}
studyRank <- rank(clust.seq, ties.method = "random")
X <- data.frame(X, studyRank)
X
X <- X[X$studyRank,]
X
data.frame(studyRank)
data.frame(studyRank, order(studyRank))
data.frame(studyRank, order(studyRank, decreasing = FALSE))
data.frame(studyRank, order(studyRank, decreasing = TRUE))
class(studyRankl)
class(studyRank)
X <- X[X$studyRank,]
X
X <- X[order(X$studyRank),]
X
plot(X$yearPublished)
plot(X.smp$yearPublished)
plot(X$yearPublished)
X <- select(X, -studyRank)
X
X <- rbind(done.X, X)
write.csv(X, file="reordered_study_list.csv", row.names=FALSE, header=TRUE)
write.csv(X, file="reordered_study_list.csv", row.names=FALSE, sep = ",")
write.csv(X, file="reordered_study_list.csv", row.names=FALSE)
getwd()
# 5/2/2022 by Petr Keil
library("readxl")
library("rstudioapi")
library("dplyr")
library("sampling")
library("cluster")
library("tidyverse")
# set working directory to the current path (works in R studio)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
orig.file <- "../../data/priority list of studies/SurveyOfMaterials-birds.xlsx"
reordered.file <- "../../data/priority list of studies/reordered_study_list.csv"
# read the data table
X <- read_excel(orig.file, sheet = 1)
X <- data.frame(X)
# turn some columns to boolean variable
X$isProtectedArea <- X$isProtectedArea == "Y"
X$isProtectedArea[which(is.na(X$isProtectedArea))] <- FALSE
X$done <- X$done == "Y"
X$done[which(is.na(X$done))] <- FALSE
# studies have already been in the database
done.X <- X[X$done == TRUE, ]
# studies that have not yet been in the database
X <- X[X$done == FALSE, ]
# ------------------------------------------------------------------------------
# select variables for clustering
cluster.vars <- select(.data = X, yearPublished, district, isProtectedArea) %>%
mutate(district = as.factor(district),
isProtectedArea = as.factor(isProtectedArea))
# pairwise dissimilarity matrix based
dissim <- daisy(cluster.vars, metric="gower")
# partitioning around medoids (PAM)
k = 10 # set number of clusters
pam.clusters = pam(as.matrix(dissim),
diss = TRUE,
k = k)$clustering
# sampling sequentially from each cluster,
clust.id <- sort(unique(pam.clusters))
clust.size <- as.numeric(table(as.factor(pam.clusters)))
clust.seq <- c()
for(i in 1:length(clust.id))
{
seq.i <- seq(from = 1, to = clust.size[i])
clust.seq <- c(clust.seq, seq.i)
}
studyRank <- rank(clust.seq, ties.method = "random")
X <- data.frame(X, studyRank)
X <- X[order(X$studyRank),]
X <- select(X, -studyRank)
X <- rbind(done.X, X)
write.csv(X, file=reordered.file, row.names=FALSE)
reordered_study_list <- read.csv("C:/Users/travnickovae/Downloads/reordered_study_list.csv")
View(reordered_study_list)
View(reordered_study_list)
View(reordered_study_list)
# 5/2/2022 by Petr Keil
library("readxl")
library("rstudioapi")
library("dplyr")
library("sampling")
library("cluster")
library("tidyverse")
# set working directory to the current path (works in R studio)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
## IMPORTANT ##
# specify path to the original (un-ordered) data
orig.file <- "../../data/priority list of studies/SurveyOfMaterials-birds.xlsx"
# this is the file into which we will export the results
reordered.file <- "../../data/priority list of studies/reordered_study_list.csv"
# read the data table
X <- read_excel(orig.file, sheet = 1)
X <- data.frame(X)
orig.file
X <- read_excel(orig.file, sheet = 1)
setwd("C:/Users/travnickovae/Downloads")
X <- read_excel(orig.file, sheet = 1)
?daisy
?pam
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
## IMPORTANT ##
# specify path to the original (un-ordered) data
orig.file <- "../../data/priority list of studies/SurveyOfMaterials-birds.xlsx"
# this is the file into which we will export the results
reordered.file <- "../../data/priority list of studies/reordered_study_list.csv"
# read the data table
X <- read_excel(orig.file, sheet = 1)
X <- data.frame(X)
# turn some columns to boolean variable
X$isProtectedArea <- X$isProtectedArea == "Y"
X$isProtectedArea[which(is.na(X$isProtectedArea))] <- FALSE
X$done <- X$done == "Y"
X$done[which(is.na(X$done))] <- FALSE
# studies have already been in the database
done.X <- X[X$done == TRUE, ]
# studies that have not yet been in the database
X <- X[X$done == FALSE, ]
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path )
orig.file <- "../../data/priority list of studies/SurveyOfMaterials-birds.xlsx"
# this is the file into which we will export the results
reordered.file <- "../../data/priority list of studies/reordered_study_list.csv"
